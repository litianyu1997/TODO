一、民间定义
    “数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。”——《数据结构与算法分析》

    “数据结构是ADT（抽象数据类型Abstract Data Type）的物理实现”——《数据结构与算法分析》

    “数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。”——中文维基百科

    自己的角度：数据结构就是在计算机中，存储和组织数据的方式

二、常见的数据结构较多
    每一种都有对应的应用场景，不同的数据结构的不同操作性能是不同的

    有的查询性能很快，有的插入速度很快，有的是插入头和尾速度很快

    有的做范围查找很快，有的允许元素重复，有的不允许重复等等

    在开发中如何选择，要根据具体的需求来选择

    注意：数据结构和语言无关，常见的编程语言都有直接或者间接的使用上述常见的数据结构

三、为什么之前学习JavaScript没有解除过数据结构呢？好像只见过数组
    单纯从客户程序员的角度，我们并不需要过多的了解他们的实现细节
    
    但是简单的使用不能让我们更加灵活的使用他们，了解真相，你才能获得真正的自由


算法（Algorithm）的定义
    一个有限指令集，每条指令的描述不依赖于语言
    接受一些输入（有些情况下不需要输入）
    产生输出
    一定在有限步骤之后终止

补充：普通语言的数组封装（比如Java的ArrayList）
    常见语言的数组不能存放不同的数据类型，因此所有在封装是通常存放在数组中的是Object类型
    
    常见语言的数组容量不会自动改变（需要进行扩容操作）

    常见语言的数组进行中间插入和删除操作性能比较低

—————————————————————————————————————————————————————————

一、栈结构
栈是一种非常常见的数组结构，并且在程序中的应用非常广泛

1、数组
    数组是一种线性结构，并且可以在数组的任意位置插入和删除数据
    但是有时候我们为了实现某些功能，必须对这种任意性加以限制
    而栈和队列就是比较常见的首先的线性结构

2、栈（stack），它是一种受限的线性表，先进后出（LIFO）
    其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对的，把另一端称为栈底。

    LIFO（last in first out）标识的就是后进入的元素，第一个弹出栈空间，类似于自动餐托盘，最后放上的托盘，往往先被拿出去使用

    向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素

    从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素

3、栈结构的实现
    实现栈结构有两种比较常见的方式
        基于数组实现
        基于链表实现
    什么是链表
        也是一种数据结构，JavaScript中并没有自带链表结构

4、栈的操作
    push(element):添加一个新元素到栈顶位置
    pop():移除栈顶的元素，同时返回被移除的元素
    peek():返回栈顶的元素，不对栈做任何修改(这个方法不会移除站定的元素，仅仅返回它)
    isEmpty():如果栈里面没有任何元素就返回true，否则返回false
    size():返回栈里面的的元素个数。这个方法和数组的length属性很类似
    toString():将站结构的内容以字符形式返回



二、队列结构
1、队列(Queue),它是一种受限的线性表,先进先出(FIFO Fist In First Out)
    受限之处在于它只允许在表的前端(front)进行删除操作
    而在表的后端(rear)及进行插入操作

2、实现队列结构有两种比较常见的方式
    基于数组实现
    基于链表实现

3、队列的操作
    enqueue(element):向队列尾部添加一个(或多个)新的项
    dequeue():移除队列的第一(即排在最前面的)项,并返回被移除的元素
    front():返回队列中的第一个元素——最先被添加,也是最先被移除的元素,队列不做任何变动(不移除元素,只返回元素信息——与Stack类的peek方法非常类似)
    isEmpty():如果队列中不包含任何元素,返回true,否则返回false
    size():返回队列包含的元素个数,与数组的length属性类似
    toString():将队列中的内容,转成字符串形式



三、优先级队列
1、优先级队列的特点；
    普通的队列插入一个元素，数据会被放在后端，并且需要前面所有元素都处理完成后才会处理前面的数据

    优先级队列在插入一个元素的时候会考虑该数据的优先级

    和其他数据优先级进行比较

    比较完成后可以得出这个元素在队列中正确的位置

    其他处理方式和基本队列的处理方式一样

2、优先级队列主要考虑的问题：
    每个元素不再只是一个数据，而且包含数据的优先级

    再添加方式中，根据优先级放入正确的位置

3、优先级队列的应用
    机场登机的顺序
    医院的急诊科候诊室



四、链表
不同于数组，链表中的元素在内存中不必是连续的空间

1、链表的每个元素由一个存储元素本身的节点和一个指向下一个元素的引用(有些语言成为指针或者连接)组成

2、相对于数组，链表有一些优点：
    内存空间不是必须连续的，可以充分利用计算机的内存，实现灵活的内存动态管理

    链表不必再创建时就确定大小，并且大小可以无限的延伸下去

    链表再插入和删除数据时，时间复杂度可以达到O(1)，相对数组效率高很多
    如果我们已经拿到了要删除的第i个节点Node(i)，就不需要进行遍历操作和查找前驱节点了，直接拿Node(i+1)来覆盖Node(i)即可。

        具体的做法如下：

        1.Node(i)->data=Node(i)-next->data;

        2.Node(i)-next=Node(i+1)->next;

        这样的时间复杂度就是O(1)

3、相对于数组，链表有一些缺点：
    链表访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一个元素访问任何一个元素)

    无法通过下标直接访问元素，需要从头一个个访问，直到找到对应的元素

4、链表常见操作
    append(element):向列表尾部添加一个新的项
    insert(position,element):向列个表的特定位置插入一个新的项
    get(position):获取对应位置的元素
    indexOf(element):返回元素在列表中的索引，如果列表中没有该元素则反回-1
    update(position,element):修改某个位置的元素
    removeAt(position):从列表的特定位置移除一项
    remove(element):从列表中移除一项
    isEmpty():如果链表中不包含任何元素，返回true，否则返回false
    size():返回链表包含的元素个数，与数组的length属性类似
    toString():由于列表项使用了Node类，就需要重写JavaScript对象默认的toString方法，让其只输出元素的值

toString方法
    主要是获取每一个元素

    从head开头，因为获取链表的任何元素都必须从第一个节点开头
    循环遍历每一个节点，并且去除其中的element，拼接成字符串
    最终字符串返回

insert方法
添加到第一个位置
    表示新添加的节点是头，就需要将原来的头节点作为新节点的next
    另外这个时候的head应该指向新节点

添加到其他位置
    通过while循环，一点点向下找，并且在这个过程中保存上一个节点和下一个节点
    找到正确的位置后，将新节点的next指向下一个节点，将上一个节点的next指向新的节点



五、认识双向链表
1、单向链表：
    只能从头遍历到尾或者从尾遍历到头(一般从头到尾)
    也就是链表相连的过程是单向的
    实现的原理是上一个链表中有一个指向下一个的引用

2、单向链表有一个比较明显的缺点：
    我们可以轻松的达到下一个节点，但是回到前一个节点是很难的，但是，在实际开发中，经常会遇到需要回到上一个节点的情况

    举个例子：假设一个文本编辑用链表来出粗你文本，每一行用一个String对象储存在链表的一个节点中，当编辑器用户向下移动光标时，链表直接操作到下一个节点即可，可是当用于将光标向上移动呢？这个时候为了回到上一个节点，我们可能需要从first开始，依次走到想要的节点上

3、双向链表：
    既可以从头遍历到尾，又可以从尾遍历到头
    也就是链表相连的过程是双向的
    一个节点既有向前连接的引用，也有一个向后连接的引用
    双向链表可以有效的解决单项链表中提到的问题

4、双向链表的缺点：
    每次在插入或删除某个节点时需要处理四个引用，而不是两个
    并且相当于单向链表，必然占用内存空间更大一些
    但是这些缺点和我们使用起来的方便程度相比是微不足道的

5、双向链表的特点
    可以使用一个head和一个tail分别指向头部和尾部的节点
    每个系欸但都由三个部分组成：前一个节点的指针(prev)/保存的元素(item)/后一个节点的指针(next)
    双向链表的第一个节点的prev是null
    双向链表的最后的节点的next是null

6、双向链表常见操作
    append(element):向列表尾部添加一个新的项
    insert(position,element):向列个表的特定位置插入一个新的项
    get(position):获取对应位置的元素
    indexOf(element):返回元素在列表中的索引，如果列表中没有该元素则反回-1
    update(position,element):修改某个位置的元素
    removeAt(position):从列表的特定位置移除一项
    remove(element):从列表中移除一项
    isEmpty():如果链表中不包含任何元素，返回true，否则返回false
    size():返回链表包含的元素个数，与数组的length属性类似
    toString():由于列表项使用了Node类，就需要重写JavaScript对象默认的toString方法，让其只输出元素的值
    forwardString():返回正向遍历的节点字符串形式
    backwordString():返回反向遍历的节点字符串形式



六、集合结构
几乎每种编程语言中都有集合结构
集合比较常见的实现方法是哈希表

1、集合通常是由一组无序的，不能重复的元素构成
    和数学中集合名词比较相似，但是数学中的集合范围更大一些，也允许集合中的元素重复

    在计算机中，集合通常表示结构中元素是不允许重复的

2、特殊的数组
    特殊之处在于里面的元素没有顺序，也不能重复

    没有顺序意味着不能通过下标值进行访问，不能重复意味着相同的对象在集合中只会存在一份

3、创建集合类
    封装一个Set类
    function Set(){
        // 使用一个对象来保存集合的元素
        this.items = {};

        // 集合的操作方法
    }

    代码解析：
        代码就是封装了一个集合的构造函数
        在集合中，添加了一个items属性，用于保存之后添加到集合中的元素，因为Object的keys本身就是一个集合
        后续给集合添加对应的操作方法

4、集合的操作
    add(value):向集合添加一个新的项
    remove(value):从集合移除一个值
    has(value):如果值在集合中，返回true，否则返回false
    clear():移除集合中的所有项
    size():返回集合所包含元素的数量，与数组得length属性类似
    values():返回一个包含集合中所有值得数组

5、集合间操作
    并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合

    交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合

    差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合

    子集：验证一个给定集合是否是另一个集合的子集


    并集：
        并集其实对应就是数学中并集的概念
        集合A和B的并集，表示为A∪B，定义如下：
            A∪B={x|x∈A V x∈B}
        意思是x(元素)存在于A中，或x存在于B中
    
    代码解析：
        首先需要创建一个新的集合，代表两个集合的并集
        遍历集合1中所有的值，并且添加到新集合中
        遍历集合2中所有的值，并且添加到新集合中
        将最终的集合返回


    交集：
        交集其实对应的就是数学中交集的概念
        集合A和B的交集，表示为A∩B，定义如下：
            A∩B={x|x∈A^x∈B}
        意思是x(元素)存在于A中，且x存在于B中

    代码解析：
        创建一个新的集合
        遍历集合1中的所有元素，判断是否该元素在集合2中
        同时在集合2中，将该元素加入到新集合中
        将最终的集合返回

    差集：
        差级其实对应的就是数学中差集的概念
        集合A和B的差级，表示为A-B，定义如下：
            A-B={x|x∈A^x∉B}
        意思是x(元素)存在于A中，且x不存在于B中

    代码解析：
        创建一个新的集合
        遍历集合1中的所有元素，判断是否该元素在集合2中
        不存在集合2中，将该元素加入到新集合中
        将最终的集合返回
    


七、字典
数组-集合-字典是几乎编程语言都会默认提供的数据类型
    在JavaScript中默认提供了数组，ES6中添加了集合和字典

1、字典的特点
    字典的主要特点是一一对应的关系
    比如保存一个人的信息，在合适的情况下取出这些信息
    使用数组的方式：[18,"Coderwhy",1.88].可以通过下标值取出信息
    使用字典的方式：{"age":18,"name":"Coderwhy","height":1.88}.可以通过key取出value
    另外字典中的key是不可以重复的，而Value可以重复，并且字典中的key是无序的

2、深入字典
    字典和映射的关系：
        有些编程语言中称这种映射关系为字典，因为它确实和生活中的字典比较相似.(比如Swift中Dictionary,Python中的dict)
        有些编程语言中称这种映射关系为Map.(比如Java中就有HashMap&TreeMap等)

    字典和数组：
        字典和数组对比的话，字典可以非常方便的通过key来搜索对应的value，key可以包含特殊含义，也更容易被人们记住
    
    字典和对象：
        很多编程语言(比如Java)中对字典和对象的区分比较明显，对象通常是一种编译期就确定下来的结构，不可以动态的添加或者删除属性.而字典通常会使用类似于哈希表的数据结构去试下哪一种可以动态的添加数据的结构
        但是在JavaScript中，似乎对象本身就是一种字典，所有在早期的JavaScript中，没有字典这种数据类型，因为你完全可以使用对象去代替



八、哈希表
几乎所有的编程语言都有直接或者间接的应用这种数据结构

1、哈希表通常是基于数组进行实现的，但是相对于数组，它也有很多的优势：
    他可以提供非常快速的插入-删除-查找操作
    无论多少数据，插入和删除值需要接近常量的时间：即O(1)的时间级，实际上，只需要几个机器指令既可完成
    哈希表的速度比树还要快，基本可以瞬间查找到想要的元素
    哈希表相对树来说编码要容易的多

相对于数组的一些不足：
    哈希表中的数据是没有顺循序的，所以不能以一种固定的方式(比如从小到大)来遍历其中的元素
    通常情况下，哈希表中的key是不允许重复的，不能防止相同的key，用于保存不同的元素

2、数组的效率
    1)数组进行插入操作时，效率比较低
    2)数组进行查找操作的效率
        如果是基于索引进行查找操作效率非常高
        基于内容去查找(比如name='why')效率比较低
    3)数组进行删除操作，效率也不高

3、案例一：公司员工存储
   案例二：联系人和电话存储
   案例三：50000个单词的存储

4、字母转数字
单词/字符串转下标值，其实就是字母/文字转数字

    方案一：数字相加
        一种转换单词的简单方案就是把单词每个字符的编码求和
        例如单词cats转成数字3+1+20+19=43，内马尔43就作为cats单词的下标存在数组中
    问题：按照这种方案有一个很明显的问题就是很多单词最终的下标可能都是43
    比如was/tin/give/tend/moan/tick等等
    数组中一个下标值位置只能存储一个数据
    如果存入后来的数据，必然会造成数据的覆盖
    一个下标存储这么多单词显然是不合理的

    方法二：幂的连乘
        平常使用的大于10的数字，可以用一种幂的练成表示它的唯一性，比如：7654 = 7*10^3 + 6*10^2 + 5*10 + 4
        这样的道德数字可以基本保证它的唯一性，不会和别的单词重复

    哈希化：将大数字转化成数组范围内下标的过程
    哈希函数：通常我们会将单词转成大数字，大数字在进行哈希化的代码实现放在一个函数中，这个函数称为哈希函数
    哈希表：最终将数据插入到这个数组，对整个结构的封装，称之为是一个哈希表

    冲突：
        比如melioration这个单词，通过哈希函数得到它数组的下标值吼，发现那个位置上已经存在一个单词demystify
        这种情况称为冲突
    


    解决方案一:链地址法(也称为拉链法)
        每个下标值的位置存储一个数组或链表，再在数组或链表中存储元素

        图片解析：
            从图片中可以看出，连地址发解决冲突的办法是每个数组单元中存储的不再是单个数据，而是一个链条
            这个链条使用数组或者链表
            比如是链表，也就是每个数组单元中存储着一个链表，一旦发现重复，将重复的元素插入到链表的首段或者末端即可
            当查询时，现根据哈希化后的下标值找到对应的位置，再取出链表，依次查询找到数据

        使用数组还是链表？
            数据组或者链表在这里其实都可以，效率上也差不多
            因为根据哈希化的index找出这个数组或者连表示，通常就会使用线性查找，这个时候数组和链表的效率时差不多的
            当然在某些实现中，会将新插入的数据放在数组或者链表的最前面，因为觉得新插入的数据用于去除的可能性更大
            这种情况最好采用链表，因为数组在首位插入数据时需要所有其他项后移的，链表就没有这样的问题
            当然，处于这个也看业务需求，不见得新的数据就访问次数会更多：比如我们微信新添加的好友，可能是刚认识的，联系的频率不见得比我们的老朋友更多，甚至新加的只是聊一两句
            所以这里选择数组或者链表都是可以的



    解决方案二:开放地址法
        图片解析：
            开放地址发其实就是要寻找空白的位置来防止冲突的数据项
        但是探索这个位置的方法不同，有三种方法：

            线性探测
                插入的32：
                    经过哈希化得到的index=2，但是再插入的时候，发信啊该位置已经有了82
                    线性探测就是从index位置+1开始一点点查找合适的位置来放置32
                    空的位置就是合适的位置，在上面的例子中就是index=3的位置，这个时候32就会放在该位置
                查询32：
                    查询32和插入32比较类似
                    受限经过哈希化得到index=2，比如2的位置结果和查询的数值是否相同，相同那么就直接返回
                    不相同，先行查找，从index位置+1开始查找和32一样的
                    注意：如果32的位置我们之前没有插入，查询过程有个约定，查询到空位置就停止，因为查询到这里有空位置，32之前不可能跳过空位置去其他位置
                删除32：
                    注意：删除操作一个数据项时，不可以将这个位置下标的内容设置为null
                    如果将它设置为null可能会影响我们之后查询其他操作，所以通常删除一个位置的数据项时，可以将它进行特殊处理(比如设置为-1)
                    当之后看到-1位置的数据项时，就知道查询时要继续查询，但是插入时这个位置可以放置数据
                问题：
                    线性探测有比较严重的问题：聚集
                    比如在没有任何数据的时候，插入的时22-23-24-25-26，那么意味着下标值2-3-4-5-6的位置都有元素
                    这种一连串填充单元就叫做聚集
                    聚集会影响哈希表的性能，无论是插入/查询/删除都会影响
                    比如插入一个32，会发下能连续的单元都不允许放置数据，并且在这个过程中需要探索多次
                    二次探测可以解决一部分这个问题

            二次探测
                在线性探测的基础上进行了优化：
                    线性探测，是步长为1的探测，比如从下标值开始，x+1，x+2，x+3依次探测
                    二次探测，对步长做了优化，比如从下标值x开始，x+1^2，x+2^2，x+3^2
                    这样就可以一次性探测比较长的举例，避免聚集带来的影响
                问题:
                    比如插入的是32-112-82-2-192，那么依次累加的时候步长是相同的
                    也就是这种情况下会造成步长不一的一种聚集，还是会影响效率(可能性相对连续的数字会小一些)

            再哈希法 
                二次探测的算法产生的探测序列步长是固定的：1，4，9，16，依次类推
                现在需要一种方法：产生一种依赖关键字的探测序列，而不是每个关键字都一样
                那么，不同的关键字即使映射到相同的数组下标，也可以使用不同的探测序列
                哈希法：把关键字用另外一个哈希函数，再做一次哈希化，用这词哈希化的结果作为步长
                对于指定的关键字，步长在整个探测中是不变的，不过不同的关键字使用不同的步长
            第二次哈希化需要具备如下特点：
                和第一个哈希函数不同(不要再使用上一次的哈希函数，不然结果还是原来的位置)
                不能输出0(否则，将没有步长,每次探测都是原地踏步，算法就进入了死循环)
            
            哈希函数：
                stepSize = constant - (key - constant)
                其中constant是质数，且小于数组的容量
                例如stepSize = 5 - (key % 5)，满足需求，并且结果不可能为0

5、哈希化的效率
    哈希表中执行插入和搜索操作效率是非常高的
        如果没有产生冲突，那么效率就会更高
        如果发生冲突，存取时间就以来后来的探测长度
        平均探测长度一级平均存取时间，取决于填装因子，随着填装因子变大，探测长度也越来越长
        随着填装因子变大，效率下降的情况，在不同开放地址法方案中比链地址法更严重

    装填因子
        装填因子表示当前哈希表中已经包含的数据项和整个哈希表长度的比值
        装填因子 = 总数据项 / 哈希表长度
        开放地址法的装填因子最大是1，因为它必须寻找到空白的单元才能将元素放入
        链地址法的装填因子可以大于1，因为拉链法可以无限的延伸下去

6、线性探测的效率
    下面的等式显示了线性探测时，探测序列(P)和装填因子(L)的关系
        对成功的查找：P = (1+1/(1-L)^2)/2
        对不成功的查找：P =  (1+1/(1-L))/2
    
    图片解析：
        当装填因子是1/2时，成功的搜索需要1.5次比较，不成功的搜索需要2.5次
        当装填因子时2/3时，分别需要2.0次和5.0次比较
        如果装填因子更大，比较次数会非常大
        应该使装填因子保持在2/3一下，最好在1/2以下，另一方面，填装因子越低，对于给定数量的数据项，就需要越多的空间
        实际情况中，最好的装填因子取决于存储效率和速度之间的平衡，随着装填因子变小，存储效率下降，而速度上升

7、链地址法
    链抵制法的效率分析有些不同，一般来说比开放地址法简单
        假如哈希表包含arraySize个数据项，每个数据项有一个链表，在表中一共包含N个 数据项
        平均每个链表有N/arraySize个数据项
        这个公式就是装填因子
    求查找成功和不成功的次数
        成功可能只需要查找链表的一半即可：1+loadFactor/2
        不成功可能需要将整个链表查询完才知道：1+loadFactor
    经过上面的比较，链地址法相对开放地址发效率更好
    在真实开发中，使用链地址法的情况较多
        不会因为添加了某元素后性能急剧下降
        比如在Java的HashMap中使用的就是链地址法

8、霍纳法则/秦九韶算法
    P(x) = an x^n + a(n-1) x^(n-1) + …… + a1 x + a0
    ((……(((anx + an-1)x + an-2)x + an-3)……)x + a1)x + a0，
    这种求值的安排称为霍纳法则

    变换后：
        乘法次数：N次
        加法次数：N次

    时间复杂度从O(N²)降到了O(N)
    
9、均匀分布
    质数的使用：
        哈希表的长度
        N次幂的底数

    
        哈希表的长度最好使用质数
        再哈希法中质数的重要性：
            假设表的容量不是质数，例如：表长为15(下标值0~14)
            有一个特定关键字映射到0，步长为5
            探测序列0-5-10-0循环
            算法只尝试这三个单元，如果这三个单元已经有了数据，那么会一直循环下去，直到程序崩溃
            如果容量是一个质数，比如13
            探测序列0-5-10-2-7-12-4-9-1-6-11-3-8-0
            可以让数据在哈希表中均匀的分布
        链地址法中质数没那么重要，甚至在Java中故意时2的N次幂
    
10、Java中的HashMap

    Java中的哈希表采用的是链地址法

    HashMap的初始长度是16，每次自动扩展，长度必须是2的次幂

    这是为了服务于从Key映射到index的算法

    HashMap中为了提高效率，采用了位运算的方式

        HashMap中index的计算公式：index = HashCode(Key) &(Length-1)

        比如计算nbook的hashcode，解雇欧维十进制的3029737，二进制的1011100011101011101001
        
        假定HashMap长度是默认的16，计算Length-1的结果为十进制的15，二进制的1111

        把以上两个结果做运算，1011100011101011101001&1111 = 1001，十进制是9，所以index=9

        这样的方式相对于取模来说性能是高的，因为计算机能更好的运算二进制的数据

11、哈希函数的实现
    哈希函数.html

12、创建哈希表
    采用链地址法来实现哈希表：
        实现的哈希表(基于storage的数组)每个index对应的是一个数组(buket).(基于链表也可以)
        bucket中存放key和value，使用一个数组
        最终哈希表的数据格式：[[[k,v],[k,v],[k,v]],[[k,v],[k,v],[k,v]]]
        // 大桶里面套小桶，小桶里面套多个元素

        代码：
            // 创建HashTable构造函数
            function HashTable(){
                // 定义属性
                this.storage = [];
                this.count = 0;
                this.limit = 8;
            }

        代码解析：
            定义三个属性：
            storage作为数组，数组中存放相关的元素
            count表示当前已经存在了多少数据
            limit用于标记数组中一共可以存放多少个元素

    插入&修改数据
        哈希表的插入和修改操作是同一个函数
            因为，当使用者传入一个<key,value>时
            如果原来不存在该key，那么就是插入操作
            如果已经存在该key，那么就是修改操作
        代码解析：
        步骤1：根据传入的key获取对应的hashcode，也就是数组的index
        步骤2：从哈希表的index位置中取出桶(另外一个数组)
        步骤3：查看上一步的bucket是否为null
            为null，表示之前在该位置没有防止过任何的内容，那么就心间一个数组[]
        步骤4：查看是否之前已经防止过key对应的value
            如果放置过，那么就是依次替换操作，而不是插入新的何数据
            使用一个变量override来记录是否是修改操作
        步骤5：如果不是修改操作，那么插入新的数据
            在bucket中push新的[key,value]即可
            注意：这里需要将count+1，因为数据增加了一项

13、哈希表扩容的思想

为什么要扩容?
    目前是将所有数据项放在长度为7的数组中的
    因为使用的是链地址法，loadFactor可以大于1，所以这个哈希表可以无限的插入新数据
    但是，随着数据量的增多，每一个index对应的bucket会越来越长，也就造成效率的降低
    所以，再合适的情况对数组进行扩容，比如扩容两倍

如何进行扩容？
    扩容可以简单的将容量增大两倍
    但是这种情况下，所有数据项一定要同时进行修改(重新调用哈希函数来获取到不同的位置)
    比如hashCode=12的数据项，在length=8的时候，index=4，在长度为16的时候index=12
    这是一个耗时的过程，但是如果数组需要扩容，那么这个过程是必要的

什么情况下扩容？
    比较常见的情况是loadFactor>0.75的时候进行扩容
    比如Java的哈希表就是在装填因子大于0.75的时候对哈希表进行扩容

14、容量质数
    容量最好是质数
        虽然在链地址法中将容量设置为质数，没有在开放地址法中重要
        但是其实链地址法中质数作为容量也更利于数据的均匀分布

    例题：判断一个数是质数

    质数的特点：
        质数也称为素数，质数表示大于1的自然数中，只能被1和自己整出的数
    

    普通判断质数：
    function isPrime(num){
        for(var i = 2; i < num; i++){
            if(num % i == 0){
                return false;
            }
        }
        return true;
    }
    // 测试
    alert(isPrime(3));
    alert(isPrime(32));
    alert(isPrime(37));

    更高效的质数判断
        对每个数n，其实并不需要从2判断到n-1
        一个数若可以进行因数分解，那么分解时得到的两个数一定时一个小于等于sqrt(n)，一个大于等于sqrt(n)
        比如16可以被分为2*8，sqrt(16)=4,而4*4都是等于sqrt(n)
        其实只需要遍历到等于sqrt(n)即可

    function isPrime(num){
        // 获取num的平方根
        var temp = parseInt(Math.sqrt(num));

        // 循环判断
        for(var i = 2; i <= temp; i++){
            if(num % i == 0){
                return false;
            }
        }
        return true;
    }
    // 测试
    alert(isPrime(3));
    alert(isPrime(32));
    alert(isPrime(37));




    
