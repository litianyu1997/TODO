一、民间定义
    “数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。”——《数据结构与算法分析》

    “数据结构是ADT（抽象数据类型Abstract Data Type）的物理实现”——《数据结构与算法分析》

    “数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。”——中文维基百科

    自己的角度：数据结构就是在计算机中，存储和组织数据的方式

二、常见的数据结构较多
    每一种都有对应的应用场景，不同的数据结构的不同操作性能是不同的

    有的查询性能很快，有的插入速度很快，有的是插入头和尾速度很快

    有的做范围查找很快，有的允许元素重复，有的不允许重复等等

    在开发中如何选择，要根据具体的需求来选择

    注意：数据结构和语言无关，常见的编程语言都有直接或者间接的使用上述常见的数据结构

三、为什么之前学习JavaScript没有解除过数据结构呢？好像只见过数组
    单纯从客户程序员的角度，我们并不需要过多的了解他们的实现细节
    
    但是简单的使用不能让我们更加灵活的使用他们，了解真相，你才能获得真正的自由


算法（Algorithm）的定义
    一个有限指令集，每条指令的描述不依赖于语言
    接受一些输入（有些情况下不需要输入）
    产生输出
    一定在有限步骤之后终止

补充：普通语言的数组封装（比如Java的ArrayList）
    常见语言的数组不能存放不同的数据类型，因此所有在封装是通常存放在数组中的是Object类型
    
    常见语言的数组容量不会自动改变（需要进行扩容操作）

    常见语言的数组进行中间插入和删除操作性能比较低

—————————————————————————————————————————————————————————

一、栈结构
栈是一种非常常见的数组结构，并且在程序中的应用非常广泛

1、数组
    数组是一种线性结构，并且可以在数组的任意位置插入和删除数据
    但是有时候我们为了实现某些功能，必须对这种任意性加以限制
    而栈和队列就是比较常见的首先的线性结构

2、栈（stack），它是一种受限的线性表，先进后出（LIFO）
    其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对的，把另一端称为栈底。

    LIFO（last in first out）标识的就是后进入的元素，第一个弹出栈空间，类似于自动餐托盘，最后放上的托盘，往往先被拿出去使用

    向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素

    从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素

3、栈结构的实现
    实现栈结构有两种比较常见的方式
        基于数组实现
        基于链表实现
    什么是链表
        也是一种数据结构，JavaScript中并没有自带链表结构

4、栈的操作
    push(element):添加一个新元素到栈顶位置
    pop():移除栈顶的元素，同时返回被移除的元素
    peek():返回栈顶的元素，不对栈做任何修改(这个方法不会移除站定的元素，仅仅返回它)
    isEmpty():如果栈里面没有任何元素就返回true，否则返回false
    size():返回栈里面的的元素个数。这个方法和数组的length属性很类似
    toString():将站结构的内容以字符形式返回



二、队列结构
1、队列(Queue),它是一种受限的线性表,先进先出(FIFO Fist In First Out)
    受限之处在于它只允许在表的前端(front)进行删除操作
    而在表的后端(rear)及进行插入操作

2、实现队列结构有两种比较常见的方式
    基于数组实现
    基于链表实现

3、队列的操作
    enqueue(element):向队列尾部添加一个(或多个)新的项
    dequeue():移除队列的第一(即排在最前面的)项,并返回被移除的元素
    front():返回队列中的第一个元素——最先被添加,也是最先被移除的元素,队列不做任何变动(不移除元素,只返回元素信息——与Stack类的peek方法非常类似)
    isEmpty():如果队列中不包含任何元素,返回true,否则返回false
    size():返回队列包含的元素个数,与数组的length属性类似
    toString():将队列中的内容,转成字符串形式



三、优先级队列
1、优先级队列的特点；
    普通的队列插入一个元素，数据会被放在后端，并且需要前面所有元素都处理完成后才会处理前面的数据

    优先级队列在插入一个元素的时候会考虑该数据的优先级

    和其他数据优先级进行比较

    比较完成后可以得出这个元素在队列中正确的位置

    其他处理方式和基本队列的处理方式一样

2、优先级队列主要考虑的问题：
    每个元素不再只是一个数据，而且包含数据的优先级

    再添加方式中，根据优先级放入正确的位置

3、优先级队列的应用
    机场登机的顺序
    医院的急诊科候诊室



四、链表
不同于数组，链表中的元素在内存中不必是连续的空间

1、链表的每个元素由一个存储元素本身的节点和一个指向下一个元素的引用(有些语言成为指针或者连接)组成

2、相对于数组，链表有一些优点：
    内存空间不是必须连续的，可以充分利用计算机的内存，实现灵活的内存动态管理

    链表不必再创建时就确定大小，并且大小可以无限的延伸下去

    链表再插入和删除数据时，时间复杂度可以达到O(1)，相对数组效率高很多
    如果我们已经拿到了要删除的第i个节点Node(i)，就不需要进行遍历操作和查找前驱节点了，直接拿Node(i+1)来覆盖Node(i)即可。

        具体的做法如下：

        1.Node(i)->data=Node(i)-next->data;

        2.Node(i)-next=Node(i+1)->next;

        这样的时间复杂度就是O(1)

3、相对于数组，链表有一些缺点：
    链表访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一个元素访问任何一个元素)

    无法通过下标直接访问元素，需要从头一个个访问，直到找到对应的元素

4、链表常见操作
    append(element):向列表尾部添加一个新的项
    insert(position,element):向列个表的特定位置插入一个新的项
    get(position):获取对应位置的元素
    indexOf(element):返回元素在列表中的索引，如果列表中没有该元素则反回-1
    update(position,element):修改某个位置的元素
    removeAt(position):从列表的特定位置移除一项
    remove(element):从列表中移除一项
    isEmpty():如果链表中不包含任何元素，返回true，否则返回false
    size():返回链表包含的元素个数，与数组的length属性类似
    toString():由于列表项使用了Node类，就需要重写JavaScript对象默认的toString方法，让其只输出元素的值

toString方法
    主要是获取每一个元素

    从head开头，因为获取链表的任何元素都必须从第一个节点开头
    循环遍历每一个节点，并且去除其中的element，拼接成字符串
    最终字符串返回

insert方法
添加到第一个位置
    表示新添加的节点是头，就需要将原来的头节点作为新节点的next
    另外这个时候的head应该指向新节点

添加到其他位置
    通过while循环，一点点向下找，并且在这个过程中保存上一个节点和下一个节点
    找到正确的位置后，将新节点的next指向下一个节点，将上一个节点的next指向新的节点



五、认识双向链表
1、单向链表：
    只能从头遍历到尾或者从尾遍历到头(一般从头到尾)
    也就是链表相连的过程是单向的
    实现的原理是上一个链表中有一个指向下一个的引用

2、单向链表有一个比较明显的缺点：
    我们可以轻松的达到下一个节点，但是回到前一个节点是很难的，但是，在实际开发中，经常会遇到需要回到上一个节点的情况

    举个例子：假设一个文本编辑用链表来出粗你文本，每一行用一个String对象储存在链表的一个节点中，当编辑器用户向下移动光标时，链表直接操作到下一个节点即可，可是当用于将光标向上移动呢？这个时候为了回到上一个节点，我们可能需要从first开始，依次走到想要的节点上

3、双向链表：
    既可以从头遍历到尾，又可以从尾遍历到头
    也就是链表相连的过程是双向的
    一个节点既有向前连接的引用，也有一个向后连接的引用
    双向链表可以有效的解决单项链表中提到的问题

4、双向链表的缺点：
    每次在插入或删除某个节点时需要处理四个引用，而不是两个
    并且相当于单向链表，必然占用内存空间更大一些
    但是这些缺点和我们使用起来的方便程度相比是微不足道的

5、双向链表的特点
    可以使用一个head和一个tail分别指向头部和尾部的节点
    每个系欸但都由三个部分组成：前一个节点的指针(prev)/保存的元素(item)/后一个节点的指针(next)
    双向链表的第一个节点的prev是null
    双向链表的最后的节点的next是null

6、双向链表常见操作
    append(element):向列表尾部添加一个新的项
    insert(position,element):向列个表的特定位置插入一个新的项
    get(position):获取对应位置的元素
    indexOf(element):返回元素在列表中的索引，如果列表中没有该元素则反回-1
    update(position,element):修改某个位置的元素
    removeAt(position):从列表的特定位置移除一项
    remove(element):从列表中移除一项
    isEmpty():如果链表中不包含任何元素，返回true，否则返回false
    size():返回链表包含的元素个数，与数组的length属性类似
    toString():由于列表项使用了Node类，就需要重写JavaScript对象默认的toString方法，让其只输出元素的值
    forwardString():返回正向遍历的节点字符串形式
    backwordString():返回反向遍历的节点字符串形式



六、集合结构
几乎每种编程语言中都有集合结构
集合比较常见的实现方法是哈希表

1、集合通常是由一组无序的，不能重复的元素构成
    和数学中集合名词比较相似，但是数学中的集合范围更大一些，也允许集合中的元素重复

    在计算机中，集合通常表示结构中元素是不允许重复的

2、特殊的数组
    特殊之处在于里面的元素没有顺序，也不能重复

    没有顺序意味着不能通过下标值进行访问，不能重复意味着相同的对象在集合中只会存在一份

3、创建集合类
    封装一个Set类
    function Set(){
        // 使用一个对象来保存集合的元素
        this.items = {};

        // 集合的操作方法
    }

    代码解析：
        代码就是封装了一个集合的构造函数
        在集合中，添加了一个items属性，用于保存之后添加到集合中的元素，因为Object的keys本身就是一个集合
        后续给集合添加对应的操作方法

4、集合的操作
    add(value):向集合添加一个新的项
    remove(value):从集合移除一个值
    has(value):如果值在集合中，返回true，否则返回false
    clear():移除集合中的所有项
    size():返回集合所包含元素的数量，与数组得length属性类似
    values():返回一个包含集合中所有值得数组

5、集合间操作
    并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合

    交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合

    差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合

    子集：验证一个给定集合是否是另一个集合的子集


    并集：
        并集其实对应就是数学中并集的概念
        集合A和B的并集，表示为A∪B，定义如下：
            A∪B={x|x∈A V x∈B}
        意思是x(元素)存在于A中，或x存在于B中
    
    代码解析：
        首先需要创建一个新的集合，代表两个集合的并集
        遍历集合1中所有的值，并且添加到新集合中
        遍历集合2中所有的值，并且添加到新集合中
        将最终的集合返回





