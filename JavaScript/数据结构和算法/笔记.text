民间定义
    “数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。”——《数据结构与算法分析》

    “数据结构是ADT（抽象数据类型Abstract Data Type）的物理实现”——《数据结构与算法分析》

    “数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。”——中文维基百科

自己的角度
    数据结构就是在计算机中，存储和组织数据的方式

常见的数据结构较多
    每一种都有对应的应用场景，不同的数据结构的不同操作性能是不同的

    有的查询性能很快，有的插入速度很快，有的是插入头和尾速度很快

    有的做范围查找很快，有的允许元素重复，有的不允许重复等等

    在开发中如何选择，要根据具体的需求来选择

注意：数据结构和语言无关，常见的编程语言都有直接或者间接的使用上述常见的数据结构

为什么之前学习JavaScript没有解除过数据结构呢？好像只见过数组
    单纯从客户程序员的角度，我们并不需要过多的了解他们的实现细节
    
    但是简单的使用不能让我们更加灵活的使用他们，了解真相，你才能获得真正的自由


算法（Algorithm）的定义
    一个有限指令集，每条指令的描述不依赖于语言
    
    接受一些输入（有些情况下不需要输入）

    产生输出

    一定在有限步骤之后终止

补充：普通语言的数组封装（比如Java的ArrayList）
    常见语言的数组不能存放不同的数据类型，因此所有在封装是通常存放在数组中的是Object类型
    
    常见语言的数组容量不会自动改变（需要进行扩容操作）

    常见语言的数组进行中间插入和删除操作性能比较低



栈结构
栈是一种非常常见的数组结构，并且在程序中的应用非常广泛
数组
    数组是一种线性结构，并且可以在数组的任意位置插入和删除数据
    但是有时候我们为了实现某些功能，必须对这种任意性加以限制
    而栈和队列就是比较常见的首先的线性结构

栈（stack），它是一种受限的线性表，先进后出（LIFO）
    其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对的，把另一端称为栈底。

    LIFO（last in first out）标识的就是后进入的元素，第一个弹出栈空间，类似于自动餐托盘，最后放上的托盘，往往先被拿出去使用

    向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素

    从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素

栈结构的实现
实现栈结构有两种比较常见的方式
    基于数组实现
    基于链表实现
什么是链表
    也是一种数据结构，JavaScript中并没有自带链表结构

栈的操作
    push(element):添加一个新元素到栈顶位置
    pop():移除栈顶的元素，同时返回被移除的元素
    peek():返回栈顶的元素，不对栈做任何修改(这个方法不会移除站定的元素，仅仅返回它)
    isEmpty():如果栈里面没有任何元素就返回true，否则返回false
    size():返回栈里面的的元素个数。这个方法和数组的length属性很类似
    toString():将站结构的内容以字符形式返回



队列结构
队列(Queue),它是一种受限的线性表,先进先出(FIFO Fist In First Out)
    受限之处在于它只允许在表的前端(front)进行删除操作
    而在表的后端(rear)及进行插入操作

实现队列结构有两种比较常见的方式
    基于数组实现
    基于链表实现

队列的操作
    enqueue(element):向队列尾部添加一个(或多个)新的项
    dequeue():移除队列的第一(即排在最前面的)项,并返回被移除的元素
    front():返回队列中的第一个元素——最先被添加,也是最先被移除的元素,队列不做任何变动(不移除元素,只返回元素信息——与Stack类的peek方法非常类似)
    isEmpty():如果队列中不包含任何元素,返回true,否则返回false
    size():返回队列包含的元素个数,与数组的length属性类似
    toString():将队列中的内容,转成字符串形式